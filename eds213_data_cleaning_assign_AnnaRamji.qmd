---
title: "EDS 213 Assignment 2: Data Cleaning"
author: "Anna Ramji"
format: html
---

my fork of the class repo: <https://github.com/annaramji/bren-meds213-data-cleaning>


```{r}
#| message: false  

# Libraries
library(tidyverse)

# file names
datadir_raw <- "data/raw/"

datadir_processed <- "data/processed/"

species_file <- "ASDN_Daily_species.csv"

snowsurvey_file <- "ASDN_Snow_survey.csv"
```


Import data

```{r read-in-data}
# Import the species
snowsurvey_clean <- read_csv(file.path(datadir_processed, "snow_cover.csv"))
```


```{r}
# from last class:
# snowsurvey_fixed <- snowsurvey_csv %>% 
#   mutate(Snow_cover = ifelse(Snow_cover == ".", NA, Snow_cover)) %>% 
#   mutate(Snow_cover = ifelse(Snow_cover == "-", NA, Snow_cover)) %>% 
#   mutate(Snow_cover = ifelse(Snow_cover == "n/a", NA, Snow_cover)) %>% 
#   mutate(Snow_cover = ifelse(Snow_cover == "unk", NA, Snow_cover)) %>% 
#   mutate(Snow_cover = ifelse(Snow_cover == "<1", "0", Snow_cover)) %>% 
#   mutate(Snow_cover = as.numeric(Snow_cover)) %>% 
#   mutate(Snow_cover = ifelse(Snow_cover > 100, NA, Snow_cover)) 


#write_csv(snowsurvey_fixed, file.path(datadir_processed, "snow_cover.csv"))

```

# Cleaning Water_cover

```{r}
# explore
# snowsurvey_clean %>% 
#   count(Water_cover) %>% 
#   filter(is.na(as.numeric(Water_cover)))
# looks like there are similar issues with "-", ".", "n/a", "unk" and actual NAs

# snowsurvey_csv %>% 
#   filter(Water_cover == ".")

# it seems like most of these are empty and can be replaced with NA. The same is true for the other symbols and phrases.
snowsurvey_clean_water <- snowsurvey_clean %>% 
  mutate(Water_cover = ifelse(Water_cover == ".", NA, Water_cover)) %>%
  mutate(Water_cover = ifelse(Water_cover == "-", NA, Water_cover)) %>%
  mutate(Water_cover = ifelse(Water_cover == "n/a", NA, Water_cover)) %>%
  mutate(Water_cover = ifelse(Water_cover == "unk", NA, Water_cover)) %>%
  mutate(Water_cover = as.numeric(Water_cover)) 

# > snowsurvey_clean_water %>% filter(Water_cover > 100) # returns 1 entry
# > snowsurvey_clean_water %>% filter(Water_cover < 0) # returns 0 entries

# there is one entry in which Water_cover is 353, Snow_cover is 45, and Land_cover is -298... Total_cover is somehow 100. I think it's possible that they meant to put 35 for Water_cover and 20 for Land_cover, but I can't actually assume that so I'll set it to NA for now.  Seems like we should remove this row entirely since something seems to have gone wrong and makes me doubt the rest of the information in that entry. 

snowsurvey_clean_water <- snowsurvey_clean_water %>% 
  mutate(Water_cover = ifelse(Water_cover > 100, NA, Water_cover)) # replace values over 100 with NA 

# glimpse(snowsurvey_clean_water)
# Water_cover is in the proper data type and looks good!
```

## Cleaning Land_cover

```{r}
# inspect NAs in Land_cover column
# snowsurvey_clean %>% 
#   count(Land_cover) %>% 
#   filter(is.na(as.numeric(Land_cover)))

# same issues with "-", "." (585 of these!), "n/a" and "unk".

# snowsurvey_clean %>% 
#   filter(Land_cover == ".") 
# seems to be just NAs as well as the "-"

snowsurvey_clean_land <- snowsurvey_clean_water %>% 
  mutate(Land_cover = ifelse(Land_cover == ".", NA, Land_cover)) %>%
  mutate(Land_cover = ifelse(Land_cover == "-", NA, Land_cover)) %>%
  mutate(Land_cover = ifelse(Land_cover == "n/a", NA, Land_cover)) %>%
  mutate(Land_cover = ifelse(Land_cover == "unk", NA, Land_cover)) %>%
  mutate(Land_cover = as.numeric(Land_cover)) 
  
  
# snowsurvey_clean_land %>% filter(Land_cover > 100) # returns 0 entries
# snowsurvey_clean_land %>% filter(Land_cover < 0) # returns 2 entries

# in the following row:
# barr   2011 31-May-… brw3  d10              NA           0       -100 100         abankert NA  
# Land_cover is written as -100. The other two columns are 0 and NA, and the total is 100. I think it is safe to guess that this value is supposed to be + 100.

# in the other row, 
# 2 barr   2011 8-Jun-11 brw5  l4               45          NA       -298 100         jcunnin… NA 
#This is the complicated row from the Water_cover cleaning step. Snow_cover is 45, we turned Water_cover into NA, and Land_cover is -298 while Total_cover is 100. I think it makes the most sense to turn this value into NA.

snowsurvey_clean_land <- snowsurvey_clean_land %>% 
  mutate(Land_cover = ifelse(Land_cover == -100, NA, Land_cover)) %>% 
  mutate(Land_cover = ifelse(Land_cover < 0, NA, Land_cover))

# check to see if these updates worked:
# glimpse(snowsurvey_clean_land) # Land_cover is a double (proper data type)
# snowsurvey_clean_land %>% filter(Land_cover < 0) # returns 0 entries
```

Use the relationship between the three cover columns (Snow, Water, Land) to infer missing values (NAs?) where possible and recompute the Total_cover column

question: turn NAs to 0s if the other columns add to 100?

```{r}
# infer missing value (pseudo-code)

# check that column a + b + c = total_cover
# if NA in any of those (a, b, or c) and total_cover

# if Snow_cover + Water_cover + Land_cover > 100, Total_cover = NA (inspect these rows first)

# make conditional: if column a + b = 100 (& Total_cover == 100?) and c is NA, set c to 0
# if column b + c = 100 and a is NA, set a to 0
# if column a + c = 100 and b is NA, set b to 0

# END pseudo-code

# make a copy of the most updated cleaned cover df
snowsurvey_clean_cover <- snowsurvey_clean_land

# 
# total_cover_cleaned <- snowsurvey_clean_land %>% 
#   mutate(total_clean = ifelse((Snow_cover + Land_cover + Water_cover) == 100, Total_cover, NA))

# check NA rows
# total_cover_cleaned %>% 
#   filter(is.na(total_clean))


# Clean NAs, set conditions to add NAs and replace elligible NAs with 0s. 
total_snowsurvey_clean <- snowsurvey_clean_cover %>%
  mutate(
    
    # When water cover + land cover == total cover AND total cover == 100 AND snow cover is NA, replace snow cover with 0. Else, just keep original values for snow cover.
    Snow_cover = case_when(
      (Water_cover + Land_cover == Total_cover) & (Total_cover == 100) & (Snow_cover == NA) ~ 0,
      .default = Snow_cover
    ),
    
    # When snow cover + land cover == total cover AND total cover == 100 AND water cover is NA, replace that NA with 0. Else, just keep original values for water cover.
    Water_cover = case_when(
      (Snow_cover + Land_cover == Total_cover) & (Total_cover == 100) & (Water_cover == NA) ~ 0,
      .default = Water_cover
    ),
    
    # When water cover + snow cover == total cover AND total cover == 100 AND land cover is NA, replace that NA with 0. Else, just keep original values for land cover.
    Land_cover = case_when(
      (Water_cover + Snow_cover == Total_cover) & (Total_cover == 100) & (Land_cover == NA) ~ 0,
      .default = Land_cover
    )) %>% 
    # I'm omitting the following part because I figured out how to do it more succinctly, but wanted to leave this in for myself to refer to for later projects.
    # when all 4 columns are 0, set all values to NA (not much different from that anyway, but we don't want those extra empty 0s to be impacting any stats we try to pull from our dataset)
    # Land_cover = case_when(
    #   (Land_cover == 0 & Water_cover == 0 & Snow_cover == 0 & Total_cover == 0) ~ NA,
    #   .default = Land_cover
    # ),
    # Water_cover = case_when(
    #   (Land_cover == 0 & Water_cover == 0 & Snow_cover == 0 & Total_cover == 0) ~ NA,
    #   .default = Water_cover
    # ),
    # Snow_cover = case_when(
    #   (Land_cover == 0 & Water_cover == 0 & Snow_cover == 0 & Total_cover == 0) ~ NA,
    #   .default = Snow_cover
    # ),
    # total_clean = case_when(
    #   (Land_cover == 0 & Water_cover == 0 & Snow_cover == 0 & Total_cover == 0) ~ NA,
    #   .default = Total_cover
    # )) %>% 
  rowwise() %>% # to perform mathematical operations rowwise (sum of specified columns)
  mutate(
    # When total cover = snow + water + land AND total cover == 100, keep value of total cover. Else, set to NA (make a new column name here)
    total_clean = case_when(
      # When Total_cover is equal to the sum of snow, water, and land cover (remove NAs in this part of the operation) AND total cover is equal to 100, keep value for total cover. Else, replace with NA.
      ((Total_cover == sum(Snow_cover, Water_cover, Land_cover, na.rm = TRUE)) & (Total_cover == 100)) ~ Total_cover),
      .default = NA # not confident about this (I'd rather inspect visually and figure out what's going on) but it does act as a flag that something in that row is amiss.
    )


# testing to see if I can set all values to NA if all values are 0 and/or NA (wouldn't want 0s that are actually NAs to be impacting any algebraic operation performed on those columns)
total_snowsurvey_clean_2 <- total_snowsurvey_clean %>% 
  # when all 4 columns are 0 and/or NA, set all values to NA. Else, leave values as-is (or as previously transformed, in this case...)
  mutate(across(c("Snow_cover", "Land_cover", "Water_cover", "Total_cover"),
                 ~ifelse(all(. %in% c(0, NA)), NA, .)))

# at site barr in 2010, there are many entries that appear to only be recording Snow_cover (has an integer, the others are 0 and Total_cover == Snow_cover).
# for these, I set Total_cover to NA unless Snow_cover == 100 (Snow_cover + Water_cover + Land_cover = Total_cover & != 100, set to NA)
# when Snow_cover =0 and 

# checking to see if I accomplished what I wanted (I did!)
# total_snowsurvey_clean_2 %>% 
#   filter(is.na(total_clean)) %>% 
#   select(-Notes, -Observer, -Location)
```

Outputting: all_cover_fixed_YOURNAME.csv in the data/processed folder


```{r}
# Save output as all_cover_fixed_YOURNAME.csv

# note: total_clean is the new cleaned Total_cover column
write_csv(total_snowsurvey_clean_2, file.path(datadir_processed, "all_cover_fixed_ANNARAMJI.csv"))

```

